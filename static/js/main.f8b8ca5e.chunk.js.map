{"version":3,"sources":["components/Header/Header.js","Redux/reducers/questionReducers.js","Redux/reducers/index.js","Redux/store/store.js","Redux/action creators/index.js","Redux/hooks/useAction.js","components/AddQuestion/AddQuestion.js","components/Infosection/InfoSection.js","components/QuestionList/Questionslist.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","initialState","questions","id","question","answer","dealy","loading","questionReducers","state","action","type","payload","questionIndex","findIndex","questionId","updatedQuestions","questionText","filteredQuestions","filter","reducers","combineReducers","questionData","store","createStore","applyMiddleware","thunk","addNewQuestion","questionObj","dispatch","setTimeout","updateQuestion","updatedQuestion","deleteQuestion","removeQuestions","displayLoader","isShowLoader","useAction","useDispatch","bindActionCreators","actionCreators","AddQuestion","useState","delay","setDelay","useSelector","showLoader","isDisplay","onSubmit","event","preventDefault","target","elements","checked","uuidv4","value","reset","size","name","maxLength","required","rows","cols","style","marginLeft","onChange","InfoSection","questionsCount","QuestionsList","editQuestion","setEditQuestion","openModal","setOpenModal","sortingDirection","setSortingDirection","questionsData","setQuestionsData","editTextInput","useRef","useEffect","length","role","map","onClick","answerState","document","getElementById","display","showAnswer","open","showEditModal","sort","a","b","localeCompare","onClose","closeOnOverlayClick","styles","modal","top","ref","defaultValue","autoComplete","current","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.f8b8ca5e.chunk.js","sourcesContent":["import './Header.css';\n\nconst Header = () => {\n  return (\n    <div>\n      <div className='row'>\n        <div className='app-header mobile app-nav'>\n          <h4 className='app-title'>The Awesome Q-A Tool</h4>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Header;\n","const initialState = {\n  questions: [\n    {\n      id: '23',\n      question: 'how to add a question?',\n      answer: 'just use the form below!!!!',\n      dealy: false,\n    },\n  ],\n  loading: false,\n};\n\nconst questionReducers = (state = initialState, action) => {\n  switch (action.type) {\n    case 'create_question':\n      return {\n        ...state,\n        questions: [action.payload, ...state.questions],\n      };\n    case 'show_loader':\n      return {\n        ...state,\n        loading: action.payload,\n      };\n    case 'update_question': {\n      const questionIndex = state.questions.findIndex(\n        (question) => question.id === action.payload.questionId\n      );\n      const updatedQuestions = [...state.questions];\n      updatedQuestions[questionIndex].question = action.payload.questionText;\n      return {\n        ...state,\n        questions: updatedQuestions,\n      };\n    }\n    case 'delete_question': {\n      const filteredQuestions = state.questions.filter(\n        (question) => question.id !== action.payload\n      );\n      return {\n        ...state,\n        questions: filteredQuestions,\n      };\n    }\n    case 'delete_all_question': {\n      return {\n        ...state,\n        questions: [],\n      };\n    }\n    default:\n      return state;\n  }\n};\nexport default questionReducers;\n","import { combineReducers } from 'redux';\nimport questionReducers from './questionReducers.js';\n\nconst reducers = combineReducers({\n  questionData: questionReducers,\n});\n\nexport default reducers;\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport reducers from '../reducers';\n\nexport const store = createStore(reducers, {}, applyMiddleware(thunk));\n","/**\n * Action creator method for  add a new question and dispatch action to store.\n * if delay (checkbox is click) then it takes 5 seconds to dispatch action,\n * add to list.\n * @param {*} id\n * @param {*} question\n * @param {*} answer\n * @param {*} dealy\n */\n\nexport const addNewQuestion = (id, question, answer, dealy) => {\n  const questionObj = {\n    id,\n    question,\n    answer,\n    dealy,\n  };\n\n  if (dealy) {\n    return (dispatch) => {\n      return setTimeout(() => {\n        dispatch({ type: 'create_question', payload: questionObj });\n      }, 5000);\n    };\n  } else {\n    return (dispatch) => {\n      dispatch({ type: 'create_question', payload: questionObj });\n    };\n  }\n};\n\n/**\n * updateQuestion method pass questionId\n * and updated text to reducer for change state\n *\n * @param {*} questionId\n * @param {*} questionText\n */\n\nexport const updateQuestion = (questionId, questionText) => {\n  const updatedQuestion = {\n    questionId,\n    questionText,\n  };\n  return (dispatch) => {\n    dispatch({ type: 'update_question', payload: updatedQuestion });\n  };\n};\n\n/**\n * deleteQuestion pass questionId as payload to reducer function\n * @param {*} questionId\n */\n\nexport const deleteQuestion = (questionId) => {\n  return (dispatch) => {\n    dispatch({ type: 'delete_question', payload: questionId });\n  };\n};\n\n/**\n *  Method dispatch reducer function for removeAll questions\n */\nexport const removeQuestions = () => {\n  return (dispatch) => {\n    dispatch({ type: 'delete_all_question' });\n  };\n};\n\n/**\n *  Method disptach to reducer function to show loader true/false\n * @param {*} isShowLoader\n */\nexport const displayLoader = (isShowLoader) => {\n  return (dispatch) => {\n    dispatch({ type: 'show_loader', payload: isShowLoader });\n  };\n};\n","import { bindActionCreators } from 'redux';\nimport { useDispatch } from 'react-redux';\nimport { actionCreators } from '../store';\n\nexport const useAction = () => {\n  const dispatch = useDispatch();\n  return bindActionCreators(actionCreators, dispatch);\n};\n","import { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useAction } from '../../Redux/hooks/useAction';\nimport { v4 as uuidv4 } from 'uuid';\nimport './AddQuestion.css';\n\nconst AddQuestion = () => {\n  const [delay, setDelay] = useState(false);\n  const { addNewQuestion, displayLoader } = useAction();\n  const loading = useSelector((state) => state.questionData);\n\n  /**\n   * Method addNewQuestionHander take values from form\n   * Dispatch addNewQuestion methods with values\n   * @param {*} event\n   */\n  const addNewQuestionHander = (event) => {\n    event.preventDefault();\n    if (event.target.elements.delay.checked) {\n      showLoader(event.target.elements.delay.checked);\n    }\n    const questionId = uuidv4();\n    addNewQuestion(\n      questionId,\n      event.target.elements.question.value,\n      event.target.elements.answer.value,\n      delay\n    );\n    event.target.reset();\n    setDelay(false);\n  };\n\n  /**\n   * Based on checkbox checked and unchecked call dispatch method\n   * @param {true/flase} isDisplay\n   */\n  const showLoader = (isDisplay) => {\n    if (isDisplay) {\n      displayLoader(isDisplay);\n    }\n  };\n\n  /**\n   * Method set state with dealy checkbox checked or unchecked\n   * @param {*} event\n   */\n  const handleOnchangeDelay = (event) => {\n    setDelay(event.target.checked);\n  };\n\n  return (\n    <div className='section'>\n      <div className='question-container'>\n        <div\n          className={\n            loading && loading.loading\n              ? 'question-form disable-click'\n              : 'question-form'\n          }\n        >\n          {loading && loading.loading && <div className='loader'></div>}\n\n          <h3\n            className='question-form-title tooltip'\n            data-tooltip='Here you create a new question and their answers.'\n          >\n            Create Question\n          </h3>\n          <form data-testid='form' onSubmit={addNewQuestionHander}>\n            <label className='label' id='question'>\n              Question\n            </label>\n            <input\n              aria-labelledby='question'\n              type='text'\n              size='35'\n              className='question-input'\n              name='question'\n              maxLength='50'\n              required\n            />\n            <label className='label' id='answer-textarea'>\n              Answer\n            </label>\n            <textarea\n              rows='10'\n              cols='30'\n              name='answer'\n              aria-labelledby='answer-textarea'\n              required\n            ></textarea>\n            <label className='check-box-delay' id='delay'>\n              Delay\n              <input\n                type='checkbox'\n                style={{ marginLeft: 5 }}\n                onChange={handleOnchangeDelay}\n                checked={delay}\n                name='delay'\n                aria-labelledby='delay'\n                data-testid='dealy-checkbox'\n              />\n            </label>\n            <button type='submit' className='submit-btn'>\n              Create / Add Question\n            </button>\n          </form>\n        </div>\n      </div>\n      <div></div>\n    </div>\n  );\n};\n\nexport default AddQuestion;\n","import './InfoSection.css';\n\nconst InfoSection = ({ questionsCount }) => {\n  return (\n    <>\n      <div className='divider'></div>\n      <div className='info-container'>\n        {questionsCount ? (\n          <p className='info-text'>\n            Here you can find {questionsCount} questions. Feel free to create\n            your own questions!\n          </p>\n        ) : (\n          <p className='info-text'>\n            Here you can find no questions. Feel free to create your own\n            questions!\n          </p>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default InfoSection;\n","import { useState, useRef, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useAction } from '../../Redux/hooks/useAction';\nimport { Modal } from 'react-responsive-modal';\nimport InfoSection from '../Infosection/InfoSection';\nimport './QuestionList.css';\nimport 'react-responsive-modal/styles.css';\n\n/**\n * Method showAnswer when click on questions.\n * @param {*question Id} id\n */\nconst showAnswer = (id) => {\n  const answerState = document.getElementById(id);\n  answerState.style.display =\n    answerState.style.display !== 'block' ? 'block' : 'none';\n};\n\nconst QuestionsList = () => {\n  const [editQuestion, setEditQuestion] = useState(null);\n  const [openModal, setOpenModal] = useState(null);\n  const [sortingDirection, setSortingDirection] = useState('DEC');\n  const [questionsData, setQuestionsData] = useState([]);\n  const editTextInput = useRef('');\n  const questions = useSelector((state) => state.questionData.questions);\n  const {\n    updateQuestion,\n    deleteQuestion,\n    removeQuestions,\n    displayLoader,\n  } = useAction();\n\n  useEffect(() => {\n    setQuestionsData(questions);\n    displayLoader(false);\n  }, [questions, displayLoader]);\n\n  /**\n   * Method showes edit modal for updation\n   * Set state for edit question.\n   * @param {*} question\n   */\n  const showEditModal = (question) => {\n    setEditQuestion(question);\n    setOpenModal({ open: true });\n  };\n\n  /**\n   *  Method close modal when click on close icon.\n   * set edit question to null\n   */\n  const handleCloseModal = () => {\n    setOpenModal({ open: false });\n    setEditQuestion(null);\n  };\n\n  /**\n   * Method save updated question.\n   * if question is empty it keep same question so blank question is not accepted.\n   * dispatch updateQuestion method to store\n   */\n  const saveUpdatedQuestion = () => {\n    if (!editTextInput.current.value.length) {\n      editTextInput.current.value = editQuestion.question;\n    }\n    updateQuestion(editQuestion.id, editTextInput.current.value);\n    setOpenModal({ open: false });\n    setEditQuestion(null);\n  };\n\n  /**\n   * Method accept delete id\n   * dispatch to store deleteQuestion method\n   * @param {question id} id\n   */\n  const handleDeleteQuestion = (id) => {\n    deleteQuestion(id);\n  };\n\n  /**\n   * Method sort question ascending and descending order.\n   */\n  const sortQuestions = () => {\n    if (sortingDirection === 'DEC') {\n      setSortingDirection('ACE');\n      questionsData.sort((a, b) => b.question.localeCompare(a.question));\n    } else {\n      setSortingDirection('DEC');\n      questionsData.sort((a, b) => a.question.localeCompare(b.question));\n    }\n  };\n\n  /**\n   *  Method removed all question call dispatch method\n   */\n  const removeAllQuestions = () => {\n    removeQuestions();\n  };\n\n  return (\n    <>\n      <div className='container'>\n        <InfoSection questionsCount={questionsData.length} />\n        <div className='questionslist-container'>\n          <h3\n            className='questionlist-title tooltip'\n            data-tooltip='Here you find created questions and their answers.'\n          >\n            Questions List\n          </h3>\n          {!questionsData.length && (\n            <p className='alert-warning' role='alert'>\n              No questions yet :-(\n            </p>\n          )}\n\n          {!!questionsData.length &&\n            questionsData.map((question) => (\n              <div className='questions-container' key={question.id}>\n                <p\n                  onClick={() => showAnswer(question.id)}\n                  className='question'\n                  data-testid='question'\n                >\n                  {question.question}\n                </p>\n                <span className='answer' id={question.id} data-testid='answer'>\n                  {question.answer}\n                </span>\n                <div className='icons'>\n                  <i\n                    className='fas fa-edit'\n                    onClick={() => showEditModal(question)}\n                  ></i>\n                  <i\n                    className='far fa-trash-alt'\n                    onClick={() => handleDeleteQuestion(question.id)}\n                  ></i>\n                </div>\n              </div>\n            ))}\n          {!!questionsData.length && (\n            <>\n              <div className='actions'>\n                <button className='sort-question' onClick={sortQuestions}>\n                  Sort Questions\n                </button>\n                <button\n                  className='remove-question'\n                  onClick={removeAllQuestions}\n                >\n                  Remove All Questions\n                </button>\n              </div>\n            </>\n          )}\n        </div>\n        {editQuestion && (\n          <div className='edit-modal'>\n            <Modal\n              open={openModal}\n              onClose={handleCloseModal}\n              closeOnOverlayClick={false}\n              styles={{ modal: { top: '40%' } }}\n            >\n              <h3 className='edit-title'>Edit Your Question </h3>\n              <input\n                ref={editTextInput}\n                className='input-edit-question'\n                type='text'\n                defaultValue={editQuestion.question}\n                autoComplete='off'\n                maxLength='50'\n                size='99'\n              />\n              <button className='save-btn' onClick={saveUpdatedQuestion}>\n                Save\n              </button>\n            </Modal>\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default QuestionsList;\n","import './App.css';\nimport Header from './components/Header/Header';\nimport AddQuestion from './components/AddQuestion/AddQuestion';\nimport QuestionsList from './components/QuestionList/Questionslist';\nimport { Provider } from 'react-redux';\nimport { store } from './Redux/store';\n\nconst App = () => {\n  return (\n    <div>\n      <Provider store={store}>\n        <Header />\n        <QuestionsList />\n        <AddQuestion />\n      </Provider>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}